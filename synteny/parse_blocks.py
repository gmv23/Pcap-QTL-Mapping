#!/usr/bin/python

#Parse the collinearity file generated by MCScanX 
#Get a table with the coordinates of all syntenic regions to use in plotting
#Input files are collinearity file from MCScanX and gff file with gene coordinates from both species

import re

#Make dictionary with coordinates of all the genes
genes = {}
fh = open("squash.gff", "r")

for line in fh:
	line = line.strip().split("\t")
	species = line[0][:2]
	chrom = line[0][2:]
	genes[line[1]] = [species, chrom, line[2], line[3]]
fh.close()

#Start reading the collinearity file and pulling information out and writing to out file
fh = open("squash.collinearity", "r")
out = open("squash.collinearity.flat", "w")

#Write header for out file
out.write("\t".join(['Chrom_Cm', 'Start_Cm', 'Stop_Cm', 'Chrom_Cp', 'Start_Cp', 'Stop_Cp', 'Score', 'Evalue', 'N']) + '\n')

#Start with empty variables that will be filled in
Cm_chrom = set()
Cm_coords = []
Cp_chrom = set()
Cp_coords = []
score = ''
e_value = ''
N = ''

for line in fh:
	line = line.strip()

	#Skip header line
	if line[:2] == "# " or line [0:3] == "###":
		continue

	if line[:12] == "## Alignment":

		if line[:14] == "## Alignment 0":
			
			#Pull score and e-value out of alignment header
			m = re.match(".*score=(.*?) e_value=(.*?) N=(.*?) .*", line)
			score = m.group(1)
			e_value = m.group(2)
			N = m.group(3)
		
		else:
			#Write info from last alignment
		
			#First find minimum and maximum of gene coordinates within that syntenic block
			Cm_start = str(min(Cm_coords))
			Cm_end = str(max(Cm_coords))
			Cp_start = str(min(Cp_coords))
			Cp_end = str(max(Cp_coords))
		
			#Turn chromosome set into string
			Cm_chrom_string = " ".join(Cm_chrom)
			Cp_chrom_string = " ".join(Cp_chrom)

			#Now write line
			out.write("\t".join([Cm_chrom_string, Cm_start, Cm_end, Cp_chrom_string, Cp_start, Cp_end, score, e_value, N]) + "\n")
			print "\t".join([Cm_chrom_string, Cm_start, Cm_end, Cp_chrom_string, Cp_start, Cp_end, score, e_value, N])

			#Reset variables for next syntenic block
			Cm_chrom = set()
			Cm_coords = []
			Cp_chrom = set()
			Cp_coords = []			
			
			#Grab new scores and evalues
			m = re.match(".*score=(.*?) e_value=(.*?) N=(.*?) .*", line)
			score = m.group(1)
			e_value = m.group(2)
			N = m.group(3)

	else:
		#For the lines in between the alignment headers, pull out information on each of the homologous gene

		line = line.split("\t")

		#Reference gene dictionary for Cmoschata gene and pull out info
		Cm_gene = line[1]
		Cm_gene_chrom = genes[Cm_gene][1]
		Cm_gene_coords = [int(genes[Cm_gene][2]), int(genes[Cm_gene][3])] 			
		Cm_chrom.add(Cm_gene_chrom)
		Cm_coords.extend(Cm_gene_coords)

		#Do the same for Cpepo gene
		Cp_gene = line[2]
		Cp_gene_chrom = genes[Cp_gene][1]
		Cp_gene_coords = [int(genes[Cp_gene][2]), int(genes[Cp_gene][3])]
		Cp_chrom.add(Cp_gene_chrom)
		Cp_coords.extend(Cp_gene_coords)

fh.close()
out.close()

